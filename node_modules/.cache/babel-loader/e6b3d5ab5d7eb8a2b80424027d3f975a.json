{"ast":null,"code":"import { get as r, set as e } from \"react-hook-form\";\nvar t = function t(e, _t, i) {\n    if (e && \"reportValidity\" in e) {\n      var n = r(i, _t);\n      e.setCustomValidity(n && n.message || \"\"), e.reportValidity();\n    }\n  },\n  i = function i(r, e) {\n    var i = function i(_i) {\n      var n = e.fields[_i];\n      n && n.ref && \"reportValidity\" in n.ref ? t(n.ref, _i, r) : n.refs && n.refs.forEach(function (e) {\n        return t(e, _i, r);\n      });\n    };\n    for (var n in e.fields) i(n);\n  },\n  n = function n(t, _n) {\n    _n.shouldUseNativeValidation && i(t, _n);\n    var f = {};\n    for (var s in t) {\n      var u = r(_n.fields, s),\n        c = Object.assign(t[s] || {}, {\n          ref: u && u.ref\n        });\n      if (a(_n.names || Object.keys(t), s)) {\n        var l = Object.assign({}, o(r(f, s)));\n        e(l, \"root\", c), e(f, s, l);\n      } else e(f, s, c);\n    }\n    return f;\n  },\n  o = function o(r) {\n    return Array.isArray(r) ? r.filter(Boolean) : [];\n  },\n  a = function a(r, e) {\n    return r.some(function (r) {\n      return r.startsWith(e + \".\");\n    });\n  };\nexport { n as toNestErrors, i as validateFieldsNatively };","map":null,"metadata":{},"sourceType":"module"}